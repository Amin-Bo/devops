---
- name: Build and apply Kubernetes manifests (local)
  hosts: localhost
  connection: local
  gather_facts: false

  vars:
    app_dir: "{{ playbook_dir }}/.."
    image_name: "flask-crud-metrics:latest"

  tasks:
    - name: Build image into Minikube (minikube preferred, docker fallback)
      block:
        - name: Build with minikube
          command: >
            minikube image build -t {{ image_name }} {{ app_dir }}/flask-app
          args:
            chdir: "{{ app_dir }}"
          register: build_result
          changed_when: build_result.rc == 0
      rescue:
        - name: Docker build
          command: docker build -t {{ image_name }} {{ app_dir }}/flask-app
          args:
            chdir: "{{ app_dir }}"
          register: docker_build

        - name: Load image into Minikube
          command: minikube image load {{ image_name }}
          when: docker_build is defined and docker_build.rc == 0
          register: image_load
      tags: [build]

    - name: Find Kubernetes manifest files (*.yml, *.yaml)
      find:
        paths: "{{ app_dir }}"
        patterns:
          - "*.yml"
          - "*.yaml"
        recurse: yes
      register: found_manifests
      tags: [apply]

    - name: Filter manifests (exclude ansible/ and .git/)
      set_fact:
        manifests: "{{ found_manifests.files
                      | default([])
                      | rejectattr('path', 'search', '/ansible/')
                      | rejectattr('path', 'search', '/.git/')
                      | list }}"
      tags: [apply]

    - name: Show discovered manifests
      debug:
        msg: "Found {{ manifests | length }} manifest(s): {{ manifests | map(attribute='path') | list }}"
      tags: [apply]

    - name: Apply discovered manifests
      when: manifests | length > 0
      loop: "{{ manifests }}"
      loop_control:
        label: "{{ item.path }}"
      command:
        argv:
          - kubectl
          - apply
          - -f
          - "{{ item.path }}"
      register: apply_results
      tags: [apply]

    - name: expose services as LoadBalancer
      command: minikube tunnel
      when: apply_results is defined
      tags: [apply]

    - name: Show apply results
      debug:
        var: apply_results
      when: apply_results is defined
      tags: [apply]

    - name: Delete all deployments in default namespace
      command:
        argv:
          - kubectl
          - delete
          - deployment
          - --all
          - --namespace=default
      tags: [delete]

    - name: Delete all services in default namespace
      command:
        argv:
          - kubectl
          - delete
          - service
          - --all
          - --namespace=default
      tags: [delete]
